// import { useEffect, useState } from 'react';
// import Modal from 'react-bootstrap/Modal';
// import Form from 'react-bootstrap/Form';
// import Button from 'react-bootstrap/Button';
// import { useFormik } from 'formik';
// import * as Yup from "yup";
// import React from "react";
// import { useNavigate } from 'react-router-dom';
// import axios from 'axios';
// import { url } from '../../utils/constant';
// import { Col, Row } from 'react-bootstrap';
// import { toast } from 'react-toastify';


// function ModalAddBatch({ show, setShow, setBatchData }) {
//       const [courseValue, setCourseValue] = useState("")
//       const [studentValue, setStudentValue] = useState("");
//           const [courseData, setCourseData] = useState([])
//     const [studentData, setStudentData] = useState([])
//   //keep the token in web-browser
//   const token = localStorage.getItem('token')
//   // console.log(token)
//   const navigate = useNavigate()
//   const handleClose = () => {
//     setShow(false)
//     navigate('/batchdata')
//   }

//   const formSchema = Yup.object().shape({
//     batchNumber: Yup.string().required("Mandatory Field !"),
//     courseName: Yup.string().required("Mandatory Field !"),
//     sessionDay: Yup.string().required("Mandatory Field !"),
//     targetStudent: Yup.string().required("Mandatory Field !"),
//     location: Yup.string().required("Mandatory Field !"),
//     sessionTime: Yup.string().required("Mandatory Field !"),
//     fees: Yup.number().required("Mandatory Field !")
//   })

//   const formik = useFormik({
//     initialValues: {
//       batchNumber: "",
//       sessionType: "",
//       courseName: "",
//       sessionDay: "",
//       targetStudent: "",
//       location: "",
//       sessionTime: "",
//       fees: ""
//     },
//     validationSchema: formSchema,
//     onSubmit: (values) => {
//       console.log(values)
//       addBatch(values)
//     }
//   })


//   //Bearer authentication  is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:
//   let config = {
//     headers: {
//       Authorization: `Bearer ${token}`
//     }
//   }


//       //Original Course Data
//     const getCourseData = async () => {
//         console.log("Console data is called....")
//         let res = await axios.get(`${url}/allcourse`, config)
//         console.log("Course Data", res.data.courseData)
//         setCourseData(res.data.courseData)
//     }
//     useEffect(() => {
//         getCourseData()
//         getStudentData()
//     }, [])
//     console.log(courseData)

//         //student Data
//     const getStudentData = async () => {
//         console.log("Student data is called.")
//         let res = await axios.get(`${url}/allstudent`, config)
//         console.log("Student Data", res.data.studentData)
//         setStudentData(res.data.studentData)
//     }


//     const handleCourseNameChange = (e) => {
//         const selectedCourseName = e.target.value;
//             setCourseValue(selectedCourseName)
//             // console.log("selectedcourse",selectedCourse)
//         const selectedCourse = courseData.find(
//             (element) => element.courseName === selectedCourseName
//         );
//         if (selectedCourse) {
//             formik.setFieldValue("courseId", selectedCourse._id);
//             formik.setFieldValue("courseName", selectedCourse.courseName);
//             formik.setFieldValue("courseFee", selectedCourse.courseFee);
//         }
//     };


//     const handleStudentNameChange = (e) => {
//         const selectedStudentName = e.target.value;
//          setStudentValue(selectedStudentName)
//         const selectedStudent = studentData.find(
//             (element) => element.studentName === selectedStudentName
//         );
//         if (selectedStudent) {
//             console.log("studentId", selectedStudent._id);
//             formik.setFieldValue("studentId", selectedStudent._id);
//             formik.setFieldValue("studentName", selectedStudent.studentName);
//         }
//     };
//   const addBatch = async (newBatch) => {
//     try {
//       const res = await axios.post(`${url}/addbatch`, newBatch, config)
//       console.log(res)
//       if (res) {
//         let res = await axios.get(`${url}/allbatch`, config)
//         console.log("Successfully a new batch added to the DB", newBatch)
//         setBatchData(res.data.batchData)
//         notify()
//         setTimeout(() => {
//           handleClose()
//         }, 3001)
//       }
//     } catch (e) {
//       console.error('Error Adding Batch:', e)
//     }
//   }

//   return (
//     <>
//       <Modal
//         show={show} onHide={handleClose}
//         size="lg" style={{ margin: "8% 0%" }} >
//         <Modal.Header closeButton>
//           <Modal.Title  >Add Batch</Modal.Title>
//         </Modal.Header>
//         <Form onSubmit={formik.handleSubmit} className='px-5' style={{ fontSize: "80%" }}>
//           <Modal.Body>
//             <Row>
//               <Col>
//                 {/* Batch Number*/}
//                 <Form.Group className='my-3'>
//                   <Form.Label className='m-0'>Batch No.</Form.Label>
//                   <Form.Control type="text"
//                     placeholder='Type your Batch No.'
//                     name="batchNumber"
//                     value={formik.values.batchNumber}
//                     onChange={formik.handleChange}
//                     onBlur={formik.handleBlur} />
//                   {/* Error Message */}
//                   {formik.errors.batchNumber && formik.touched.batchNumber && <div className="text-danger text-center">{formik.errors.batchNumber}</div>}
//                 </Form.Group>
//               </Col>
//               <Col>
//                 {/* Course Name */}
//                 {/* <Form.Group className='my-3'>
//                   <Form.Label className='m-0'>Course Name</Form.Label>
//                   <Form.Control type="text" placeholder='Type your Course Name' name="courseName"
//                     value={formik.values.courseName}
//                     onChange={formik.handleChange}
//                     onBlur={formik.handleBlur} />
//                   {/* Error Message */}
//                   {/* {formik.errors.courseName && formik.touched.courseName && <div className="text-danger text-center">{formik.errors.courseName}</div>}
//                 </Form.Group>  */}
//                   <Form.Group className='mt-3'>
//                                 <Form.Label className='mb-0'>Course Name</Form.Label>
//                                 <select name="courseName" id="" className="form-select"
//                                     value={formik.values.courseName}
//                                     // onChange={formik.handleChange} //e.target.value
//                                     onChange={handleCourseNameChange}
//                                     onBlur={formik.handleBlur}
//                                 >
//                                     <option value="">Select Course</option>
//                                     {courseData?.map((element) =>
//                                         <option key={element.courseName}
//                                             value={element.courseName} >{element.courseName}</option>
//                                     )}
//                                     {/* <option value="677a1998ed75982c18d258fb" >677a1998ed75982c18d258fb</option>  */}
//                                 </select>
//                                 {/* Error Message */}
//                                 {formik.errors.courseName && formik.touched.courseName && <div className="text-danger text-center">{formik.errors.courseName}</div>}
//                             </Form.Group>
//               </Col>
//             </Row>
//             <Row>
//               <Col>
//                 {/* Session Type */}
//                 <Form.Group className='my-3'>
//                   <Form.Label className='m-0'>Session Type</Form.Label>
//                   <Form.Control type="text" placeholder='Type your Session Type' name="sessionType"
//                     value={formik.values.sessionType}
//                     onChange={formik.handleChange}
//                     onBlur={formik.handleBlur} />
//                   {/* Error Message */}
//                   {formik.errors.batchNumber && formik.touched.batchNumber && <div className="text-danger text-center">{formik.errors.batchNumber}</div>}
//                 </Form.Group>
//               </Col>
//               <Col>
//                 {/* Session Day */}
//                 <Form.Group className='my-3'>
//                   <Form.Label className='m-0'>Session Day</Form.Label>
//                   <Form.Control type="text" placeholder='Type your Session Day' name="sessionDay"
//                     value={formik.values.sessionDay}
//                     onChange={formik.handleChange}
//                     onBlur={formik.handleBlur} />
//                   {/* Error Message */}
//                   {formik.errors.sessionDay && formik.touched.sessionDay && <div className="text-danger text-center">{formik.errors.sessionDay}</div>}
//                 </Form.Group>
//               </Col>
//             </Row>
//             <Row>
//               <Col>
//                 {/* Target Student */}
//                 <Form.Group className='my-3'>
//                   <Form.Label className='m-0'>Target Student</Form.Label>
//                   <Form.Control type="text" placeholder='Type your Target Student' name="targetStudent"
//                     value={formik.values.targetStudent}
//                     onChange={formik.handleChange}
//                     onBlur={formik.handleBlur} />
//                   {/* Error Message */}
//                   {formik.errors.targetStudent && formik.touched.targetStudent && <div className="text-danger text-center">{formik.errors.targetStudent}</div>}
//                 </Form.Group>
//               </Col>
//               <Col>
//                 {/* Location */}
//                 <Form.Group className='my-3'>
//                   <Form.Label className='m-0'>Location</Form.Label>
//                   <Form.Control type="text" placeholder='Type your Location' name='location'
//                     value={formik.values.location}
//                     onChange={formik.handleChange}
//                     onBlur={formik.handleBlur} />
//                   {/* Error Message */}
//                   {formik.errors.location && formik.touched.location && <div className="text-danger text-center">{formik.errors.location}</div>}
//                 </Form.Group>
//               </Col>
//             </Row>

//             <Row>
//               <Col>
//                 {/* Session Time */}
//                 <Form.Group className='my-3'>
//                   <Form.Label className='m-0'>Session Time</Form.Label>
//                   <Form.Control type="text" placeholder='Type your Session Time' name="sessionTime"
//                     value={formik.values.sessionTime}
//                     onChange={formik.handleChange}
//                     onBlur={formik.handleBlur} />
//                   {/* Error Message */}
//                   {formik.errors.sessionTime && formik.touched.sessionTime && <div className="text-danger text-center">{formik.errors.sessionTime}</div>}
//                 </Form.Group>
//               </Col>
//               <Col>
//                 {/* Fees */}
//                 {/* <Form.Group className='my-3'>
//                   <Form.Label className='m-0'>Fees</Form.Label>
//                   <Form.Control type="number" placeholder='Type your Fees' name="fees"
//                     value={formik.values.fees}
//                     onChange={formik.handleChange}
//                     onBlur={formik.handleBlur} />
//                   {/* Error Message */}
//                   {/* {formik.errors.fees && formik.touched.fees && <div className="text-danger text-center">{formik.errors.fees}</div>}
//                 </Form.Group>  */}

//                       <Form.Group className='mt-3' >
//                                 <Form.Label className='mb-0'>Course Fee</Form.Label>
//                                 <Form.Control disabled
//                                     type="text" placeholder=''
//                                     name='courseFee' value={formik.values.courseFee}
//                                     onBlur={formik.handleBlur}
//                                 >
//                                 </Form.Control>

//                                 {formik.errors.courseFee && formik.touched.courseFee && <div className="text-danger text-center">{formik.errors.courseFee}</div>}
//                             </Form.Group>
//               </Col>
//             </Row>
//           </Modal.Body>
//           <Modal.Footer>
//             {/* ADD */}
//             <Button style={{ backgroundColor: "#4e73df" }}
//               type="submit"
//             >
//               Save Changes
//             </Button>
//             {/* CLOSE */}
//             <Button variant="secondary" onClick={handleClose}>
//               Close
//             </Button>

//           </Modal.Footer>
//         </Form>
//       </Modal>
//     </>
//   )
// }
// export default ModalAddBatch

// ///Batch No. cannot b eddited.

import { useEffect, useState } from 'react';
import Modal from 'react-bootstrap/Modal';
import Form from 'react-bootstrap/Form';
import Button from 'react-bootstrap/Button';
import { useFormik } from 'formik';
import * as Yup from "yup";
import React from "react";
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { url } from '../../utils/constant';
import { Col, Row } from 'react-bootstrap';
import { toast } from 'react-toastify';

function ModalAddBatch({ show, setShow, setBatchData }) {
  const [courseData, setCourseData] = useState([]);
  const [studentData, setStudentData] = useState([]);
  const [nextBatchNo, setNextBatchNo] = useState(""); // auto batch no

  const token = localStorage.getItem('token');
  const navigate = useNavigate();

  const handleClose = () => {
    setShow(false);
    navigate('/batchdata');
  };

  const formSchema = Yup.object().shape({
    courseName: Yup.string().required("Mandatory Field!"),
    sessionType: Yup.string().required("Mandatory Field!"),
    sessionDay: Yup.string().required("Mandatory Field!"),
    sessionTime: Yup.string().required("Mandatory Field!"),
    targetStudent: Yup.string().required("Mandatory Field!"),
    location: Yup.string().required("Mandatory Field!"),
  });

  const formik = useFormik({
    initialValues: {
      batchNumber: "",
      sessionType: "",
      courseName: "",
      sessionDay: "",
      sessionTime: "",
      targetStudent: "",
      location: "",
      courseFee: ""
    },
    validationSchema: formSchema,
    onSubmit: (values) => {
      const payload = { 
        ...values, 
        batchNumber: nextBatchNo, 
        fees: values.courseFee // map courseFee to fees for backend
      };
      addBatch(payload);
    }
  });

  const config = {
    headers: { Authorization: `Bearer ${token}` }
  };

  // Fetch courses
  const getCourseData = async () => {
    const res = await axios.get(`${url}/allcourse`, config);
    setCourseData(res.data.courseData);
  };

  // Fetch students
  const getStudentData = async () => {
    const res = await axios.get(`${url}/allstudent`, config);
    setStudentData(res.data.studentData);
  };

  useEffect(() => {
    getCourseData();
    getStudentData();
  }, []);

  // Fetch next batch number whenever modal opens
  const fetchNextBatchNo = async () => {
    try {
      const res = await axios.get(`${url}/nextbatchno`, config);
      setNextBatchNo(res.data.nextBatchNo);
      formik.setFieldValue("batchNumber", res.data.nextBatchNo);
    } catch (err) {
      console.error("Error fetching next batch no:", err);
    }
  };

  useEffect(() => {
    if (show) {
      formik.resetForm();   // reset form on modal open
      fetchNextBatchNo();   // fetch latest batch number
    }
  }, [show]);

  const handleCourseNameChange = (e) => {
    const selectedCourseName = e.target.value;
    const selectedCourse = courseData.find(c => c.courseName === selectedCourseName);
    if (selectedCourse) {
      formik.setFieldValue("courseId", selectedCourse._id);
      formik.setFieldValue("courseName", selectedCourse.courseName);
      formik.setFieldValue("courseFee", selectedCourse.courseFee);
    }
  };

  const addBatch = async (newBatch) => {
    try {
      await axios.post(`${url}/addbatch`, newBatch, config);
      const res = await axios.get(`${url}/allbatch`, config);
      setBatchData(res.data.batchData);
      toast.success("Batch added successfully!");
      setTimeout(() => handleClose(), 1000);
    } catch (e) {
      console.error("Error Adding Batch:", e);
      toast.error("Failed to add batch.");
    }
  };



useEffect(() => {
  const fetchNextBatchNo = async () => {
    try {
      const res = await axios.get(`${url}/nextbatchno`, config);
      console.log(res)
      setNextBatchNo(res.data.nextBatchNo);
    } catch (err) {
      console.error("Error fetching next batch no:", err);
    }
  };

  fetchNextBatchNo();
}, [show]); // fetch when modal opens


  return (
    <Modal show={show} onHide={handleClose} size="lg" style={{ margin: "8% 0%" }}>
      <Modal.Header closeButton>
        <Modal.Title>Add Batch</Modal.Title>
      </Modal.Header>
      <Form onSubmit={formik.handleSubmit} className="px-5" style={{ fontSize: "80%" }}>
        <Modal.Body>
          <Row>
            <Col>
              <Form.Group className='my-3'>
                <Form.Label>Batch No.</Form.Label>
                <Form.Control type="text" name="batchNumber" value={nextBatchNo} disabled />
              </Form.Group>
            </Col>
            <Col>
              <Form.Group className='my-3'>
                <Form.Label>Course Name</Form.Label>
                <select
                  name="courseName"
                  className="form-select"
                  value={formik.values.courseName}
                  onChange={handleCourseNameChange}
                  onBlur={formik.handleBlur}
                >
                  <option value="">Select Course</option>
                  {courseData.map(c => (
                    <option key={c._id} value={c.courseName}>{c.courseName}</option>
                  ))}
                </select>
                {formik.errors.courseName && formik.touched.courseName && (
                  <div className="text-danger text-center">{formik.errors.courseName}</div>
                )}
              </Form.Group>
            </Col>
          </Row>

          <Row>
            <Col>
              <Form.Group className='my-3'>
                <Form.Label>Session Type</Form.Label>
                <Form.Select
                  name="sessionType"
                  value={formik.values.sessionType}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                >
                  <option value="">Select Session Type</option>
                  <option value="Online">Online</option>
                  <option value="At School">At School</option>
                </Form.Select>
                {formik.errors.sessionType && formik.touched.sessionType && (
                  <div className="text-danger text-center">{formik.errors.sessionType}</div>
                )}
              </Form.Group>
            </Col>
            <Col>
              <Form.Group className='my-3'>
                <Form.Label>Session Day</Form.Label>
                <Form.Select
                  name="sessionDay"
                  value={formik.values.sessionDay}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                >
                  <option value="">Select Session Day</option>
                  <option value="Weekday">Weekday</option>
                  <option value="Weekend">Weekend</option>
                </Form.Select>
                {formik.errors.sessionDay && formik.touched.sessionDay && (
                  <div className="text-danger text-center">{formik.errors.sessionDay}</div>
                )}
              </Form.Group>
            </Col>
          </Row>

          <Row>
            <Col>
              <Form.Group className='my-3'>
                <Form.Label>Target Student</Form.Label>
                <Form.Control
                  type="text"
                  name="targetStudent"
                  value={formik.values.targetStudent}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  placeholder="Type your Target Student"
                />
                {formik.errors.targetStudent && formik.touched.targetStudent && (
                  <div className="text-danger text-center">{formik.errors.targetStudent}</div>
                )}
              </Form.Group>
            </Col>
            <Col>
              <Form.Group className='my-3'>
                <Form.Label>Location</Form.Label>
                <Form.Control
                  type="text"
                  name="location"
                  value={formik.values.location}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  placeholder="Type your Location"
                />
                {formik.errors.location && formik.touched.location && (
                  <div className="text-danger text-center">{formik.errors.location}</div>
                )}
              </Form.Group>
            </Col>
          </Row>

          <Row>
            <Col>
              <Form.Group className='my-3'>
                <Form.Label>Session Time</Form.Label>
                <Form.Select
                  name="sessionTime"
                  value={formik.values.sessionTime}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                >
                  <option value="">Select Session Time</option>
                  <option value="Morning">Morning</option>
                  <option value="Afternoon">Afternoon</option>
                  <option value="Evening">Evening</option>
                </Form.Select>
                {formik.errors.sessionTime && formik.touched.sessionTime && (
                  <div className="text-danger text-center">{formik.errors.sessionTime}</div>
                )}
              </Form.Group>
            </Col>
            <Col>
              <Form.Group className='my-3'>
                <Form.Label>Course Fee</Form.Label>
                <Form.Control type="text" name="courseFee" value={formik.values.courseFee} disabled />
              </Form.Group>
            </Col>
          </Row>
        </Modal.Body>

        <Modal.Footer>
          <Button style={{ backgroundColor: "#4e73df" }} type="submit">
            Save Changes
          </Button>
          <Button variant="secondary" onClick={handleClose}>
            Close
          </Button>
        </Modal.Footer>
      </Form>
    </Modal>
  );
}

export default ModalAddBatch;

